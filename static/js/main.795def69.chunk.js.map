{"version":3,"sources":["getWeb3.js","Components/SaveList.js","Components/CreatePropositions.js","Components/Vote.js","Components/resultats.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","SaveList","props","updateData","contract","methods","getTheWhiteListed","call","whitelist","setState","accounts","address","value","send","from","then","res","catch","err","state","prevProps","prevState","this","length","Fragment","className","style","display","justifyContent","Card","width","Header","Body","Form","Group","Control","type","id","ref","input","Button","onClick","variant","ListGroup","Item","Table","striped","bordered","hover","undefined","map","key","React","Component","CreatePropositions","getProposals","proposals","createPropositions","registeredProposal","description","Vote","vote","index","resultats","getWinningProposals","winner","Alert","Badge","voteCount","App","storageValue","componentDidMount","eth","getAccounts","net","getId","networkId","VotingContract","networks","deployedNetwork","instance","Contract","abi","runInit","alert","error","actualStatus","workflowStatus","updateWorkflow","newStatus","parseInt","changeWorkflow","element","showWorkflow","Navbar","Collapse","Nav","Link","expand","bg","Brand","href","to","disabled","eventKey","Toggle","buttonUpdateWorkflow","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.795def69.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\r\nimport { Card, Form, Button, ListGroup, Table } from \"react-bootstrap\";\r\n\r\nclass SaveList extends React.Component {\r\n    \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { contract: null, whitelist: [] };\r\n    // récupère la liste des comptes autorisés\r\n  }\r\n\r\n  updateData = async() => {\r\n    const { contract } = this.props; // eslint-disable-line no-use-before-define\r\n\r\n    // récupère l'état actuel du vote\r\n    //const workflowStatus = await contract.methods.actualStatus().call();\r\n    // récupère la liste des comptes autorisés\r\n    const whitelist = await contract.methods.getTheWhiteListed().call();\r\n    // Mettre à jour le state\r\n    this.setState({ whitelist: whitelist, contract: contract });\r\n  }\r\n\r\n  whitelist = async () => {\r\n    const { accounts, contract } = this.props;\r\n    const address = this.address.value;\r\n\r\n    // Interaction avec le smart contract pour ajouter un compte\r\n    await contract.methods.whitelist(address)\r\n      .send({ from: accounts[0] })\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.updateData();\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err);\r\n      });\r\n    // Récupérer la liste des comptes autorisés\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n      const {whitelist} = this.state;\r\n\r\n      if(whitelist.length == 0 && prevState.contract !== prevProps.contract){\r\n       this.updateData();\r\n      }\r\n    \r\n  }\r\n\r\n  render() {\r\n    const {whitelist} = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          <div>\r\n            <br></br>\r\n            <h2 className=\"text-center\">Système d'une liste blanche</h2>\r\n            <br></br>\r\n          </div>\r\n\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Card style={{ width: \"50rem\" }}>\r\n              <Card.Header>\r\n                <strong>Autoriser un nouveau compte</strong>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                <Form.Group >\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    id=\"address\"\r\n                    ref={(input) => {\r\n                      this.address = input;\r\n                    }}\r\n                  />\r\n                </Form.Group>\r\n                <Button onClick={this.whitelist} variant=\"dark\">\r\n                  {\" \"}\r\n                  Autoriser{\" \"}\r\n                </Button>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n          <br></br>\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Card style={{ width: \"50rem\" }}>\r\n              <Card.Header>\r\n                <strong>Liste des comptes autorisés</strong>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                <ListGroup variant=\"flush\">\r\n                  <ListGroup.Item>\r\n                    <Table striped bordered hover>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>@</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {whitelist !== undefined &&\r\n                          whitelist.map((a) => (\r\n                            <tr key={a}>\r\n                              <td>{a}</td>\r\n                            </tr>\r\n                          ))}\r\n                      </tbody>\r\n                    </Table>\r\n                  </ListGroup.Item>\r\n                </ListGroup>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveList;\r\n","import React from \"react\";\r\nimport { Card, Form, Button, ListGroup, Table } from \"react-bootstrap\";\r\n\r\nclass CreatePropositions extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { contract: null, proposals: [] };\r\n    // récupère la liste des comptes autorisés\r\n  }\r\n\r\n\r\n  updateData = async() => {\r\n    const { contract } = this.props; // eslint-disable-line no-use-before-define\r\n    console.log(contract);\r\n    \r\n    const proposals = await contract.methods.getProposals().call();\r\n    console.log(proposals);\r\n    //proposals == undefined ? [] : proposals;\r\n    console.log(proposals);\r\n    // Mettre à jour le state\r\n    this.setState({ proposals: proposals, contract: contract });\r\n  }\r\n  //registeredProposal\r\n  createPropositions = async () => {\r\n    const { accounts, contract } = this.props;\r\n    const proposals = this.proposals.value;\r\n\r\n    // Interaction avec le smart contract pour ajouter un compte\r\n    await contract.methods\r\n      .registeredProposal(proposals)\r\n      .send({ from: accounts[0] })\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.updateData();\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err);\r\n      });\r\n    // Récupérer la liste des comptes autorisé\r\n    // Mettre à jour le state\r\n    this.setState({ contract: contract });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let { proposals } = this.state;\r\n\r\n    if(proposals == undefined){\r\n        proposals = [];\r\n    }\r\n\r\n    if (proposals.length == 0 && prevState.contract !== prevProps.contract) {\r\n      this.updateData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n        const {proposals} = this.state;\r\n        console.log(proposals);\r\n        return (\r\n          <React.Fragment>\r\n            <div>\r\n              <div>\r\n                <br></br>\r\n                <h2 className=\"text-center\">Système d'une liste blanche</h2>\r\n                <br></br>\r\n              </div>\r\n    \r\n              <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <Card style={{ width: \"50rem\" }}>\r\n                  <Card.Header>\r\n                    <strong>Autoriser un nouveau compte</strong>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                    <Form.Group >\r\n                      <Form.Control\r\n                        type=\"text\"\r\n                        id=\"proposals\"\r\n                        ref={(input) => {\r\n                          this.proposals = input;\r\n                        }}\r\n                      />\r\n                    </Form.Group>\r\n                    <Button onClick={this.createPropositions} variant=\"dark\">\r\n                      {\" \"}\r\n                      Autoriser{\" \"}\r\n                    </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n              </div>\r\n              <br></br>\r\n              <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <Card style={{ width: \"50rem\" }}>\r\n                  <Card.Header>\r\n                    <strong>Liste des propositions</strong>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                    <ListGroup variant=\"flush\">\r\n                      <ListGroup.Item>\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                        <tr>\r\n                          <th>.</th>\r\n                        </tr>\r\n                      </thead>\r\n                          <tbody>\r\n                            {proposals !== undefined &&\r\n                              proposals.map((a) => (\r\n                                <tr key={a}>\r\n                                  <td>{a.description}</td>\r\n                                </tr>\r\n                              ))}\r\n                          </tbody>\r\n                        </Table>\r\n                      </ListGroup.Item>\r\n                    </ListGroup>\r\n                  </Card.Body>\r\n                </Card>\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default CreatePropositions;","import React from \"react\";\r\nimport { Card, Form, Button, ListGroup, Table } from \"react-bootstrap\";\r\n\r\nclass Vote extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { contract: null, proposals: [] };\r\n    // récupère la liste des comptes autorisés\r\n  }\r\n\r\n  updateData = async () => {\r\n    const { contract } = this.props; // eslint-disable-line no-use-before-define\r\n    const proposals = await contract.methods.getProposals().call();\r\n    console.log(proposals);\r\n    //proposals == undefined ? [] : proposals;\r\n    console.log(proposals);\r\n    // Mettre à jour le state\r\n    this.setState({ proposals: proposals, contract: contract });\r\n  };\r\n  //registeredProposal\r\n  vote = async () => {\r\n    const { accounts, contract } = this.props;\r\n    const proposals = this.proposals.value;\r\n\r\n    // Interaction avec le smart contract pour ajouter un compte\r\n    await contract.methods\r\n      .vote(proposals)\r\n      .send({ from: accounts[0] })\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.updateData();\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err);\r\n      });\r\n    // Récupérer la liste des comptes autorisé\r\n    // Mettre à jour le state\r\n    this.setState({ contract: contract });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let { proposals } = this.state;\r\n\r\n    if (proposals == undefined) {\r\n      proposals = [];\r\n    }\r\n\r\n    if (proposals.length == 0 && prevState.contract !== prevProps.contract) {\r\n      this.updateData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { proposals } = this.state;\r\n    console.log(proposals);\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          <div>\r\n            <br></br>\r\n            <h2 className=\"text-center\">Système d'une liste blanche</h2>\r\n            <br></br>\r\n          </div>\r\n\r\n\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Card style={{ width: \"50rem\" }}>\r\n              <Card.Header>\r\n                <strong>Liste des propositions</strong>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                <ListGroup variant=\"flush\">\r\n                  <ListGroup.Item>\r\n                    {proposals !== undefined &&\r\n                      proposals.map((a, index) => (\r\n                        <Form.Group>\r\n                          <label>\r\n                            {\" \"}\r\n                            {a.description}\r\n                            <Form.Control\r\n                              type=\"checkbox\"\r\n                              value={index}\r\n                              className=\"proposals\"\r\n                              ref={(input) => {\r\n                                this.proposals = input;\r\n                              }}\r\n                            />\r\n                          </label>\r\n                        </Form.Group>\r\n                      ))}\r\n                    <Button onClick={this.vote} variant=\"dark\">\r\n                      {\" \"}\r\n                      Voter{\" \"}\r\n                    </Button>\r\n                  </ListGroup.Item>\r\n                </ListGroup>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Vote;\r\n","import React from \"react\";\r\nimport { Card, Alert, ListGroup, Badge } from \"react-bootstrap\";\r\n\r\nclass resultats extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { contract: null, winner: [] };\r\n    // récupère la liste des comptes autorisés\r\n  }\r\n\r\n  updateData = async () => {\r\n    const { contract } = this.props; // eslint-disable-line no-use-before-define\r\n    const winner = await contract.methods.getWinningProposals().call();\r\n    console.log(winner);\r\n    //proposals == undefined ? [] : proposals;\r\n    console.log(winner);\r\n    // Mettre à jour le state\r\n    this.setState({ winner: winner, contract: contract });\r\n  };\r\n  //registeredProposal\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let { proposals } = this.state;\r\n\r\n    if (proposals == undefined) {\r\n      proposals = [];\r\n    }\r\n\r\n    if (proposals.length == 0 && prevState.contract !== prevProps.contract) {\r\n      this.updateData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { winner } = this.state;\r\n    console.log(winner);\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          <div>\r\n            <br></br>\r\n            <h2 className=\"text-center\">Système d'une liste blanche</h2>\r\n            <br></br>\r\n          </div>\r\n\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Card style={{ width: \"50rem\" }}>\r\n              <Card.Header>\r\n                <strong>Proposition gagnante :</strong>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                <ListGroup variant=\"flush\">\r\n                  <ListGroup.Item>\r\n                    <Alert variant=\"primary\">\r\n                        <span><Badge className=\"bg-danger\">{winner.voteCount} </Badge></span>\r\n\r\n                        <span>  {winner.description}</span>\r\n                    </Alert>\r\n                  </ListGroup.Item>\r\n                </ListGroup>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default resultats;\r\n","import React from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport {\n\tNav,\n\tNavbar,\n} from \"react-bootstrap\";\nimport {\n\tBrowserRouter as Router,\n\tRoutes,\n\tRoute\n} from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport SaveList from './Components/SaveList';\nimport CreatePropositions from './Components/CreatePropositions';\nimport Vote from './Components/Vote';\nimport Resultat from './Components/resultats';\n\nclass App extends React.Component {\n\tstate = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n\tconstructor(props){\n\t\tsuper(props);\n\t}\n\n\tcomponentDidMount = async () => {\n\t\ttry {\n\t\t\t// Get network provider and web3 instance.\n\t\t\tconst web3 = await getWeb3();\n\t\t\t// Use web3 to get the user's accounts.\n\t\t\tconst accounts = await web3.eth.getAccounts();\n\n\t\t\t// Get the contract instance.\n\t\t\tconst networkId = await web3.eth.net.getId();\n\t\t\tconst deployedNetwork = await VotingContract.networks[networkId];\n\n\t\t\tconst instance = new web3.eth.Contract(\n\t\t\t\tVotingContract.abi,\n\t\t\t\tdeployedNetwork && deployedNetwork.address\n\t\t\t);\n\n\t\t\t// Set web3, accounts, and contract to the state, and then proceed with an\n\t\t\t// example of interacting with the contract's methods.\n\t\t\tthis.setState({ web3, accounts, contract: instance }, this.runInit);\n\t\t} catch (error) {\n\t\t\t// Catch any errors for any of the above operations.\n\t\t\talert(\n\t\t\t\t`Failed to load web3, accounts, or contract. Check console for details.`\n\t\t\t);\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\trunInit = async () => {\n\t\tconst { contract } = this.state; // eslint-disable-line no-use-before-define\n\n\t\t// récupère l'état actuel du vote\n\t\tconst workflowStatus = await contract.methods.actualStatus().call();\n        console.log(workflowStatus);\n\t    //const enumWorkflow = await contract.methods.WorkflowStatus().call();\n\t\t\n\t\t// Mettre à jour le state\n\t\tthis.setState({  workflowStatus: workflowStatus });\n\t};\n\n\tshowWorkflow(element) {\n\t\tlet { workflowStatus } = this.state;\n\t\tlet showWorkflow = true;\n\n\t\tswitch (element) {\n\t\t\tcase \"Enregistrement\":\n\t\t\t\tif (workflowStatus == 0) {\n\t\t\t\t\tshowWorkflow = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Propositions\":\n\t\t\t\tif (workflowStatus == 1) {\n\t\t\t\t\tshowWorkflow = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Vote\":\n\t\t\t\tif (workflowStatus == 3) {\n\t\t\t\t\tshowWorkflow = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Resutats\":\n\t\t\t\tif (workflowStatus == 5) {\n\t\t\t\t\tshowWorkflow = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\treturn showWorkflow;\n\t}\n\n\n\tupdateWorkflow = async () => {\n\t\tconst { accounts, contract, workflowStatus } = this.state;\n\t\tlet newStatus = parseInt(workflowStatus) + 1;\n        console.log(newStatus);\n\t\tawait contract.methods.changeWorkflow(newStatus).send({ from: accounts[0] }).then((res) => {\n\t\t    this.setState({workflowStatus : newStatus});\n\t\t\t\n\t    })\n        .catch(function (err) {\n            console.log(err);\n        });\n\t\t//navigate('/testmerde');\n\t // this.setState({workflowStatus : newStatus});\n\t};\n\n\tbuttonUpdateWorkflow() {\n\t\treturn (\n\n\t\t\t<Navbar.Collapse className=\" justify-content-end \"> \n\t\t\t<Nav>\n\t\t\t\t<Nav.Link className='justify-content-end' onClick={ () => {this.updateWorkflow()} }>\n\t\t\t\t\tEtape suivante\n\t\t\t\t</Nav.Link>\n\t\t\t</Nav>\n\t\t\t</Navbar.Collapse>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { workflowStatus, accounts, contract } = this.state;\n\n\t\tif (!this.state.web3) {\n\t\t\treturn <div>Loading Web3, accounts, and contract...</div>;\n\t\t}\n\n\n\t\treturn (\n\t\t\t<Router>\n\t\t\t<div>\n\t\t\t\t<Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\">\n\t\t\t\t\t<Navbar.Brand href=\"#home\">Système de vote</Navbar.Brand>\n\t\t\t\t\t<Nav className=\"me-auto\">\n\t\t\t\t\t\t<Nav.Link\n\t\t\t\t\t\t\tto=\"/saveList\"\n\t\t\t\t\t\t\thref=\"/saveList\"\n\t\t\t\t\t\t\tdisabled={this.showWorkflow(\"Enregistrement\")}\n\t\t\t\t\t\t\tclassName={!this.showWorkflow(\"Enregistrement\") ? \"active\" : ''}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tEnregistrement\n\t\t\t\t\t\t</Nav.Link>\n\n\t\t\t\t\t\t<Nav.Link\n\t\t\t\t\t\t\teventKey=\"link-1\"\n\t\t\t\t\t\t\tto=\"/proposition\"\n\t\t\t\t\t\t\thref=\"/proposition\"\n\t\t\t\t\t\t\tdisabled={this.showWorkflow(\"Propositions\")}\n\t\t\t\t\t\t\tclassName={!this.showWorkflow(\"Propositions\") ? \"active\" : ''}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tPropositions\n\t\t\t\t\t\t</Nav.Link>\n\n\t\t\t\t\t\t<Nav.Link href=\"/vote\" to=\"/vote\" eventKey=\"link-2\" disabled={this.showWorkflow(\"Vote\")} className={!this.showWorkflow(\"Vote\") ? \"active\" : ''}>\n\t\t\t\t\t\t\tVote\n\t\t\t\t\t\t</Nav.Link>\n\n\t\t\t\t\t\t<Nav.Link\n\t\t\t\t\t\t\thref=\"resultats\"\n\t\t\t\t\t\t\teventKey=\"link-3\"\n\t\t\t\t\t\t\tto=\"/resultat\"\n\t\t\t\t\t\t\tdisabled={this.showWorkflow(\"Resutats\")}\n\t\t\t\t\t\t\tclassName={!this.showWorkflow(\"Resutats\") ? \"active\" : ''}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRésutats\n\t\t\t\t\t\t</Nav.Link>\n\n\t\t\t\t\t\t</Nav>  \n\t\t\t\t\t\t<Navbar.Toggle />\n\n\t\t\t\t\t\t{workflowStatus < 5 ? this.buttonUpdateWorkflow() : ''}\n\t\t\t\t\t\n\t\t\t\t</Navbar>\n\n\t\t\t\t<div>\n\t\t\t\t\t\t<Routes>\n\t\t\t\t\t\t\t\t<Route path=\"/saveList\" element={<SaveList  accounts = {accounts} contract={contract} /> } />\n\t\t\t\t\t\t\t\t<Route path=\"/proposition\" element={<CreatePropositions accounts = {accounts} contract={contract} /> } />\n\t\t\t\t\t\t\t\t<Route path=\"/vote\" element={<Vote accounts = {accounts} contract={contract} /> } />\n\t\t\t\t\t\t\t\t<Route path=\"/resultats\" element={<Resultat  accounts = {accounts} contract={contract} /> } />\n\t\t\t\t\t\t</Routes>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}